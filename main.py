import random
import re
import string

import aiohttp
from telebot.async_telebot import AsyncTeleBot
import cv2
import os
import asyncio
import uuid
from replicate import Client
bot_username = None
from constants import TEMP_DIR, bot, ADMINS_ID

from work_with_image import apply_filter, delete_temp_files, generate_sticker_pack
import admin_handlers

# –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
os.makedirs(TEMP_DIR, exist_ok=True)

user_data = {}
async def is_participant(message):
    from admin_handlers import CHANNELS_LIST
    missing_channels = []  # –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω

    for channel in CHANNELS_LIST:
        try:
            member = await bot.get_chat_member(channel, message.from_user.id)
        except Exception as e:
            error_message = str(e)

            if "Bad Request: member list is inaccessible" in error_message or 'bot was kicked from the channel chat' in error_message:
                for admin in ADMINS_ID:
                    await bot.send_message(
                        admin,
                        f"‚ö†Ô∏è <b>–ü—Ä–æ–±–ª–µ–º–∞ —Å —á–∞—Ç–æ–º</b> {channel}\n\n"
                        "–ë–æ—Ç –ø–æ—Ç–µ—Ä—è–ª –∞–¥–º–∏–Ω-–ø—Ä–∞–≤–∞ –∏–ª–∏ –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–º—É —á–∞—Ç—É.\n"
                        "üëâ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>—É–¥–∞–ª–∏—Ç–µ —á–∞—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º—ã—Ö</b> "
                        "–∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.\n\n"
                        "–ë–æ—Ç –±—É–¥–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å, –ø–æ–∫–∞ –æ–¥–Ω–æ –∏–∑ —É—Å–ª–æ–≤–∏–π –Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è. üòä",
                        parse_mode="HTML"
                    )
            else:
                await bot.send_message(message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
            continue

        if member.status == "left":  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
            missing_channels.append(channel)

    # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞–Ω–∞–ª—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
    if missing_channels:
        channels_links = "\n".join(
            [f"üëâ <a href='https://t.me/{channel.lstrip('@')}'>{channel}</a>" for channel in missing_channels]

        )
        await bot.send_message(
            message.chat.id,
            f"‚ùå <b>–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–∞–Ω–∞–ª–∞–º</b>\n\n"
            "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã:\n\n"
            f"{channels_links}\n\n"
            "üëâ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∏—Ö, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º! üòä",
            parse_mode="HTML"
        )
        return False

    return True

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
async def start_message(message):
    participant = await is_participant(message)
    if participant == False:
        return
    await bot.send_message(
            message.chat.id,
            "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ—ë —Ñ–æ—Ç–æ, –∏ —è —Å–æ–∑–¥–∞–º —Å—Ç–∏–∫–µ—Ä—ã —Å —Ç–≤–æ–∏–º –ª–∏—Ü–æ–º!"
        )


@bot.message_handler(content_types=['text'])
async def handle_text(message):
    user_id = message.chat.id
    text = message.text.strip().upper()

    if user_id in user_data and user_data[user_id].get('awaiting_gender'):
        if text in ['–ú', '–ñ']:
            user_data[user_id]['gender'] = text
            user_data[user_id]['awaiting_gender'] = False
            await bot.send_message(user_id, "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—ë —Ñ–æ—Ç–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
        else:
            await bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ '–ú' –¥–ª—è –º—É–∂—Å–∫–æ–≥–æ –∏–ª–∏ '–ñ'")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
@bot.message_handler(content_types=['photo'])
async def handle_photo(message):
    if message.chat.type != 'private':
        await bot.send_message(message.chat.id, '–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.')
        return

    participant = await is_participant(message)
    if participant == False:
        return

    user_id = message.chat.id
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –µ—â—ë –Ω–µ —É–∫–∞–∑–∞–Ω
    if user_id not in user_data or 'gender' not in user_data[user_id]:
        await bot.send_message(
            user_id,
            "–ö–∞–∫–æ–π —É –≤–∞—Å –ø–æ–ª? –ù–∞–ø–∏—à–∏—Ç–µ '–ú' –¥–ª—è –º—É–∂—Å–∫–æ–≥–æ –∏–ª–∏ '–ñ' –¥–ª—è –∂–µ–Ω—Å–∫–æ–≥–æ."
        )
        user_data[user_id] = {'awaiting_gender': True}
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∫–∞–∑–∞–Ω –ø–æ–ª
    if user_data[user_id].get('awaiting_gender'):
        await bot.send_message(
            user_id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –ø–æ–ª, –Ω–∞–ø–∏—Å–∞–≤ '–ú' –∏–ª–∏ '–ñ', –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ñ–æ—Ç–æ."
        )
        return

    unique_id = str(uuid.uuid4())  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        file_id = message.photo[-1].file_id
        file_info = await bot.get_file(file_id)
        downloaded_file = await bot.download_file(file_info.file_path)
        user_photo_path = os.path.join(TEMP_DIR, f"user_{message.chat.id}_{unique_id}.jpg")

        with open(user_photo_path, "wb") as file:
            file.write(downloaded_file)

        await bot.send_message(message.chat.id, "–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ! –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")

        gender = user_data[user_id]['gender']
        template_dir = "template_sticer_M" if gender == '–ú' else "template_sticer_W"
        templates = [os.path.join(template_dir, f) for f in os.listdir(template_dir) if f.endswith(('.jpg', '.png', '.webp'))]

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —à–∞–±–ª–æ–Ω—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        tasks = [
            apply_filter(template, user_photo_path, unique_id)
            for template in templates
        ]
        try:
            processed_photo_paths = await asyncio.gather(*tasks)
        except Exception as e:
            await bot.send_message(message.chat.id, e)
            return

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∏–∫–µ—Ä–æ–≤
        sticker_pack_url, stickers_paths = await generate_sticker_pack(processed_photo_paths, message.chat.id, unique_id, bot_username)

        await bot.send_message(message.chat.id, sticker_pack_url)

        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        await delete_temp_files(user_photo_path, *stickers_paths)

    except Exception as e:
        await bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")



async def main():
    global bot_username  # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    bot_info = await bot.get_me()
    bot_username = bot_info.username  # –ü–æ–ª—É—á–∞–µ–º —é–∑–µ—Ä–Ω–µ–π–º –±–µ–∑ —Å–∏–º–≤–æ–ª–∞ @
    print(f'bot {bot_username} started')
    await bot.infinity_polling()

if __name__ == "__main__":
    asyncio.run(main())